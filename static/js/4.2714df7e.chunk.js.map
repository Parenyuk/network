{"version":3,"sources":["hoc/withAuthRedirect.js","components/Messages/Messages.module.css","components/Messages/Message/Message.js","components/Messages/AddMessageFormRedux/AddMessageFormRedux.js","components/Messages/Messages.js","components/Messages/MessagesContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Message","className","s","message","src","head","userName","id","name","text","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","textArea","placeholder","validate","required","Messages","messagesPage","messagesDataElement","messages","map","d","key","messageBody","messagesItem","messageData","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"kNAGIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAIVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,oBCjB7EM,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,0BAA0B,KAAO,uBAAuB,SAAW,6B,8FCgBtHC,EAZC,SAACN,GAEb,OACI,yBAAKO,UAAWC,IAAEC,SACd,yBAAKC,IAAI,0EACT,yBAAKH,UAAWC,IAAEG,MACd,yBAAKJ,UAAWC,IAAEI,UAAU,kBAAC,IAAD,CAASX,GAAE,mBAAcD,EAAMa,KAAOb,EAAMc,MAAxE,KACA,yBAAKP,UAAWC,IAAEO,MAAOf,EAAMS,Y,yCCPzCO,EAAcC,YAAiB,IAqBtBC,EAJaC,YAAU,CAClCC,KAAM,kBADkBD,EAfL,SAACnB,GACpB,OACI,6BACI,0BAAMqB,SAAUrB,EAAMsB,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUX,KAAM,iBAAkBY,YAAa,qBAChEC,SAAU,CAACC,IAAUZ,KAEtB,6BACI,8CCmBLa,EA3BE,SAAC7B,GAEd,IAAIP,EAAQO,EAAM8B,aACdC,EAAsBtC,EAAMuC,SAASC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAASC,IAAKD,EAAErB,GAAIA,GAAIqB,EAAErB,GAAIC,KAAMoB,EAAEpB,KACzBL,QAASyB,EAAEzB,aACrDhB,EAAM2C,YAG3B,IAAKpC,EAAMN,OAAQ,OAAO,kBAAC,IAAD,CAAUO,GAAI,WAMxC,OACI,yBAAKM,UAAWC,IAAEwB,UACd,yBAAKzB,UAAWC,IAAE6B,cACd,6BAAMN,IAGV,kBAAC,EAAD,CAAqBV,SAVP,SAACiB,GACpBtC,EAAMuC,YAAYD,EAAYE,qB,wBCMtBC,sBACXtC,aAjBkB,SAACV,GACnB,MAAO,CACHqC,aAAcrC,EAAMqC,iBAIH,SAACY,GAEtB,MAAO,CACHH,YAAa,SAACC,GACVE,EAASC,YAAmBH,SAQpC5C,IAFW6C,CAGdZ","file":"static/js/4.2714df7e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__35kYr\",\"message\":\"Messages_message__25Iua\",\"head\":\"Messages_head__2my-n\",\"userName\":\"Messages_userName__3vUQT\"};","import React from \"react\";\r\nimport s from \"../Messages.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            <img src='https://whatsism.com/uploads/posts/2018-07/1530544023_n6fgwzftnvg.jpg' />\r\n            <div className={s.head}>\r\n                <div className={s.userName}><NavLink to={`/message/${props.id}`}>{props.name}</NavLink> </div>\r\n                <div className={s.text}>{props.message}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {textArea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field component={textArea} name={'newMessageBody'} placeholder={'Enter your message'}\r\n                 validate={[required, maxLength50]}\r\n                />\r\n                <div>\r\n                    <button>Send</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'AddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default AddMessageFormRedux;","import React from \"react\";\r\nimport s from './Messages.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router\";\r\nimport AddMessageFormRedux from \"./AddMessageFormRedux/AddMessageFormRedux\";\r\n\r\n\r\nconst Messages = (props) => {\r\n\r\n    let state = props.messagesPage;\r\n    let messagesDataElement = state.messages.map(d => <Message key={d.id} id={d.id} name={d.name}\r\n                                                                   message={d.message}/>);\r\n    let newMessageBody = state.messageBody;\r\n\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    const submitMessage = (messageData) => {\r\n       props.sendMessage(messageData.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.messages}>\r\n            <div className={s.messagesItem}>\r\n                <div>{messagesDataElement}</div>\r\n\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={submitMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Messages;\r\n/*\r\nMessages.propTypes = {\r\n    name: PropTypes.string;\r\n    messagesData: PropTypes.string;\r\n};\r\n\r\n */","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/MessagesPageReducer\";\r\nimport Messages from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)\r\n(Messages);\r\n\r\n\r\n/*\r\nMessages.propTypes = {\r\n    name: PropTypes.string;\r\n    messagesData: PropTypes.string;\r\n};\r\n\r\n */"],"sourceRoot":""}